generator client{
    provider="prisma-client-js"
}
datasource db{
    provider="postgresql"
    url=env("DATABASE_URL")
}
enum Role{
    USER
    VENDOR
    ADMIN
}
enum PaymentStatus{
    PENDING
    COMPLETED
    FAILED
    CANCELLED
    REFUNDED
    PROCESSING
}
enum BookingStatus{
    RESERVED
    CONFIRMED
    CANCELLED
    COMPLETED
    NO_SHOW
}
enum PaymentMethod{
    CARD
    CASH
    UPI
    WALLET
    NET_BANKING
}
model user{
    id String @id @default (uuid())
    fullName String
    email String @unique
    password String
    country String
    role Role
    phone String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    car car[]
    reviews reviews[]
    booking booking[]
}
model brand{
   id String @id @default (uuid()) 
    name String @unique
    media Json?
    Car car[]
}
model location{
    id String @id @default (uuid())
    city String
    state String
    country String
    latitude String
    longitude String
    media Json?
    car car[]
}
model car{
    id String @id @default (uuid())
    name String
    subInfo String
    features Json
    ownerId String @default(uuid())
    owner user @relation(fields: [ownerId], references: [id])
    brand brand @relation(fields: [brandId], references: [id])
    brandId String @default(uuid())
    price Float @default(0.0)
    media Json
    locationId String @default(uuid())
    location location @relation(fields: [locationId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime 
    car_availability car_availability[]
    reviews reviews[]
    booking booking[]
}
model car_availability{
    id String @id @default (uuid())
    carId String @default(uuid())
    car car @relation(fields: [carId], references: [id])
    startDate DateTime
    endDate DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model reviews{
    id String @id @default (uuid())
    carId String @default(uuid())
    car car @relation(fields: [carId], references: [id])
    userId String @default(uuid())
    user user @relation(fields: [userId], references: [id])
    rating Float
    comment String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model booking{
    id String @id @default (uuid())
    carId String @default(uuid())
    car car @relation(fields: [carId], references: [id])
    userId String @default(uuid())
    user user @relation(fields: [userId], references: [id])
    name String
    email String
    phone String
    paymentStatus PaymentStatus
    bookingStatus BookingStatus
    startDate DateTime
    endDate DateTime
    totalPrice Float
    status String @default("PENDING")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    payment payment[]
}
model payment{
    id String @id @default (uuid())
    bookingId String @default(uuid())
    booking booking @relation(fields: [bookingId], references: [id])
    amount Float
    paymentMethod PaymentMethod @default(CARD)
    paymentDate DateTime @default(now())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId String?
}